#!/bin/bash

# Script para desenvolvimento local com seguran√ßa m√°xima
# C√≥digo fonte NUNCA vai para o GitHub

set -e

case "$1" in
"serve")
    echo "üåê Iniciando servidor de desenvolvimento..."
    # Usar c√≥digo fonte para desenvolvimento
    if [ -f "js/src/main.js" ]; then
        cp js/src/main.js js/main.js
        echo "‚úÖ Usando c√≥digo fonte para desenvolvimento"
    fi

    # Verificar se Jekyll est√° instalado
    if command -v jekyll &>/dev/null; then
        echo "üöÄ Iniciando Jekyll server..."
        echo "ÔøΩ Acesse: http://localhost:4000/?dev=true"
        jekyll serve --host 0.0.0.0 --port 4000 --livereload
    elif command -v python3 &>/dev/null; then
        echo "üêç Jekyll n√£o encontrado. Usando Python server..."
        echo "üì± Acesse: http://localhost:8000/?dev=true"
        python3 -m http.server 8000
    elif command -v php &>/dev/null; then
        echo "üêò Usando PHP server..."
        echo "üì± Acesse: http://localhost:8000/?dev=true"
        php -S localhost:8000
    else
        echo "‚ùå Nenhum servidor dispon√≠vel (Jekyll, Python, PHP)"
        echo "ÔøΩ Instale Jekyll: gem install jekyll bundler"
    fi
    ;;
"dev")
    echo "üîß Modo desenvolvimento: usando c√≥digo fonte"
    if [ -f "js/src/main.js" ]; then
        # Copia c√≥digo fonte para produ√ß√£o (tempor√°rio para testes locais)
        cp js/src/main.js js/main.js
        echo "‚úÖ Usando js/src/main.js (c√≥digo fonte limpo)"
        echo "‚ö†Ô∏è  LEMBRE-SE: N√£o fa√ßa commit neste estado!"
    else
        echo "‚ùå C√≥digo fonte n√£o encontrado em js/src/main.js"
    fi
    ;;
"prod")
    echo "ÔøΩ Modo produ√ß√£o: ofuscando c√≥digo"
    ./scripts/backup.sh
    ./scripts/obfuscate.sh
    echo "‚úÖ Usando js/main.js (c√≥digo ofuscado)"
    echo "‚úÖ Pronto para commit/produ√ß√£o"
    ;;
"commit")
    echo "üì§ Preparando para commit seguro..."
    ./scripts/backup.sh
    ./scripts/obfuscate.sh
    git add js/main.js
    echo "‚úÖ Arquivo ofuscado adicionado ao git"
    echo "üí° Agora voc√™ pode fazer: git commit -m 'sua mensagem'"
    ;;
"restore")
    echo "üîÑ Restaurando do backup mais recente..."
    BACKUP_DIR="$HOME/.thothandson-backup/js_src"
    if [ -d "$BACKUP_DIR" ]; then
        LATEST_BACKUP=$(ls -t "$BACKUP_DIR"/main_*.js 2>/dev/null | head -n1)
        if [ -n "$LATEST_BACKUP" ]; then
            mkdir -p js/src
            cp "$LATEST_BACKUP" js/src/main.js
            echo "‚úÖ C√≥digo fonte restaurado de: $(basename "$LATEST_BACKUP")"
        else
            echo "‚ùå Nenhum backup encontrado"
        fi
    else
        echo "‚ùå Diret√≥rio de backup n√£o encontrado"
    fi
    ;;
"status")
    echo "üìä Status dos arquivos JavaScript:"
    if [ -f "js/src/main.js" ]; then
        echo "  ÔøΩ Fonte: js/src/main.js ($(wc -c <js/src/main.js) bytes) [LOCAL APENAS]"
    else
        echo "  ‚ùå Fonte: js/src/main.js (n√£o encontrado)"
    fi

    if [ -f "js/main.js" ]; then
        echo "  üîí Produ√ß√£o: js/main.js ($(wc -c <js/main.js) bytes) [GITHUB + PRODU√á√ÉO]"
        # Verificar se est√° ofuscado
        lines=$(wc -l <js/main.js)
        if [ "$lines" -lt 10 ]; then
            echo "    ‚úÖ Aparenta estar ofuscado ($lines linhas)"
        else
            echo "    ‚ö†Ô∏è  Aparenta estar limpo ($lines linhas)"
        fi
    else
        echo "  ‚ùå Produ√ß√£o: js/main.js (n√£o encontrado)"
    fi

    # Status do backup
    BACKUP_DIR="$HOME/.thothandson-backup/js_src"
    if [ -d "$BACKUP_DIR" ]; then
        BACKUP_COUNT=$(ls "$BACKUP_DIR"/main_*.js 2>/dev/null | wc -l)
        echo "  ÔøΩ Backups: $BACKUP_COUNT arquivos em $BACKUP_DIR"
    else
        echo "  üíæ Backups: nenhum backup encontrado"
    fi
    ;;
*)
    echo "üõ°Ô∏è  Script de Desenvolvimento Seguro"
    echo ""
    echo "ÔøΩ ATEN√á√ÉO: C√≥digo fonte NUNCA vai para GitHub!"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  serve   - Iniciar servidor (carrega js/src/main.js automaticamente)"
    echo "  dev     - Usar c√≥digo fonte (desenvolvimento local apenas)"
    echo "  prod    - Ofuscar c√≥digo (preparar para produ√ß√£o)"
    echo "  commit  - Preparar e adicionar arquivo ofuscado para commit"
    echo "  restore - Restaurar c√≥digo fonte do backup mais recente"
    echo "  status  - Mostrar status dos arquivos e backups"
    echo ""
    echo "Fluxo recomendado:"
    echo "  1. ./scripts/dev.sh serve    # Para desenvolver com servidor"
    echo "  2. ./scripts/dev.sh commit   # Para preparar commit"
    echo "  3. git commit -m 'mensagem'  # Para commitar"
    echo ""
    echo "üåê Para desenvolvimento:"
    echo "  - Use 'serve' para servidor completo"
    echo "  - Acesse com ?dev=true para for√ßar modo desenvolvimento"
    echo "  - Use console: switchToDevMode() / switchToProdMode()"
    echo ""
    echo "üö® IMPORTANTE: Backups em $HOME/.thothandson-backup/"
    ;;
esac
